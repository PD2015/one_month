{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red60\green60\blue60;\red255\green255\blue255;\red86\green136\blue172;
\red149\green149\blue149;\red65\green65\blue65;\red245\green245\blue245;\red242\green242\blue242;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl740\sa540

\f0\fs54 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Wow \'97 You've just unlocked ANOTHER Bonus Lesson! For your project you've set up Devise to handle passwords, but if you're curious to see what's happening behind the scenes, Jon Rose is here to walk you through how to enforce stronger passwords.\
\pard\pardeftab720\sl680\sa270

\f1\fs62 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1. Add a\'a0format validator to\'a0the password field\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls1\ilvl0
\f2\fs36 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's add a requirement that all new passwords have some complexity requirements\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 By adding a regular expression to the password field in the user model. A regular expression is a way to check and see if certain characters are present in a string. You can learn more about regular expressions {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Regular_expression"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 here}}\'a0\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the User model, we want to add a :format field for the password:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl547\sa250
\cf5 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 app/models/user.rb\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl440

\f3\fs30 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :format\
\pard\pardeftab720\sl680\sa270

\f1\fs62 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 2. Regular expressions\cb1 \
\pard\pardeftab720\sl500\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Here is the regular expression we are using:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl420

\f4\fs30 \cf6 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 /\\A.*(?=.\{10,\})(?=.*\\d)(?=.*[a-z])(?=.*[A=Z])(?=.*[\\@\\#\\$\\%\\^\\&\\+\\=]).*\\Z/
\f3 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl680\sa270

\f1\fs62 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 3. Wow - thats complicated! \'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl540
\ls2\ilvl0
\f2\fs36 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's break this down into smaller pieces so we can understand it...\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's start with the beginning and the end\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl540
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Regular expressions exists between two forward slashes, and anything in between is what we want to match. Check this out:\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl440

\f3\fs30 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 / this is what we match between the forward slashes /\'a0\
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Next, we want to make sure we match everything in the string, starting from the very\'a0beginning\'a0all the way to the end, so we include the\'a0following two special regular expression characters:\cb1 \
\pard\pardeftab720\sl440

\f3\fs30 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 /\\A this is what we match between the forward slashes \\Z/\'a0\
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Everything else in our regular expression is grouped in (). Let's look at each of these groups individually. One thing you will notice is the following construct:\cb1 \
\pard\pardeftab720\sl420

\f4\fs30 \cf6 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (?=.*   SOMETHING WE WANT TO MATCH   )
\f3 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How this works is that is creates a group which is "looking ahead" in the string to match "SOMETHING WE WANT TO MATCH". \'a0These\'a0look forward in the string to identify a pattern, matching anything (.) zero or more times followed by whatever we want to match. \'a0We reuse this over and over in our regular expression to match different things, like numbers, special characters, etc.\'a0\cb1 \
\cb3 First, we match for at least 10 characters:\cb1 \
\pard\pardeftab720\sl420

\f4\fs30 \cf6 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (?=.\{10,\})
\f3 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Next, we match for digits (numbers), using "\\d":\cb1 \
\pard\pardeftab720\sl420

\f4\fs30 \cf6 \cb8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (?=.*\\d)
\f3 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Then, we match a lowercase alphabet character:\cb1 \
\pard\pardeftab720\sl440

\f3\fs30 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (?=.*[a-z])\
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 And then we match\'a0an uppercase alphabet character:\cb1 \
\pard\pardeftab720\sl440

\f3\fs30 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (?=.*[A-Z])\
\pard\pardeftab720\sl547\sa250

\f2\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This code matches a special character. \'a0Note how each special character needs to be escaped using the "\\" character:\cb1 \
\pard\pardeftab720\sl440

\f3\fs30 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (?=.*[\\@\\#\\$\\%\\^\\&\\+\\=])\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl547
\ls3\ilvl0
\f2\fs36 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now, when we put those together, we ensure passwords are at least 10 characters long, contains a number, \'a0a lowercase and uppercase letter, as well as a special character.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A great site to use to test and learn more about ruby regular expressions is {\field{\*\fldinst{HYPERLINK "http://rubular.com/"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 rubular}}.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 One thing to\'a0keep in mind when building regular expressions is that since you probably won't build them all the time, it can be a pain to remember how to do it correctly. I frequently use rubular and examples on the internet as references\'a0\cb1 \
\pard\pardeftab720\sl680\sa270

\f1\fs62 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 4. Putting it all together\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl547
\ls4\ilvl0
\f2\fs36 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now lets get this all working, first, add our\'a0regular expression next to the field 
\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :format\'a0
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Save the changes and rerun the application\cb1 \
\pard\pardeftab720\sl680\sa270

\f1\fs62 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5. Testing our changes\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl547
\ls5\ilvl0
\f2\fs36 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Go to the top right corner of the login page and click on the 
\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'91sign up\'92 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 button\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Try to sign up with a user with a weak password\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Click on \'91submit\'92 and you\'92ll get the message
\i\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0  \'91password is invalid\'92
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , meaning\'a0our complexity requirements work!\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It's probably a good idea to update the sign up page to tell users we require strong passwords! Now they\'a0know we take security serious!\cb1 \
}